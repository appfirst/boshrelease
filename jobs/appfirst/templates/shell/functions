#!/bin/bash

fail() { echo "$*" >&2 ; exit 1 ; }

pre_start() {
  if ! [[ -L /usr/bin/collector && -x /usr/bin/collector ]]
  then ${jobPath}/bin/install
  fi
  appfirst_stop
  rm -f ${pidFile} 
  #ln -fs ${pidFile} /var/run/afcollector.pid
  cp ${jobPath}/config/AppFirst.init ${pkgPath}/lib/AppFirst.init
}

appfirst_start() {
  pre_start
  ${jobPath}/bin/jmxcollector_ctl start
  if ${jobPath}/bin/ld_preload check
  then 
    (setsid ${jobPath}/bin/attach 2 &)
    exec ${binary} --piddir="${runPath}" --libdir="${pkgPath}/lib"
  else fail "appfirst_start(): ld_preload check failed."
  fi
}

appfirst_stop() {
  ${jobPath}/bin/jmxcollector_ctl stop
  # ${jobPath}/bin/ld_preload remove # For BOSH systems we do not want to do this.
  pid=$(pidof ${binary} || true)
  (( ${pid:-0} == 0 )) || kill -9 ${pid}
}

appfirst_remove_ld_preload() {
  if [[ -f /etc/ld.so.preload ]]
  then
    export PATH=/usr/bin:/bin
    cp -f /etc/ld.so.preload /etc/AppFirst.ld_preload
    sed -e "#${wrapPath}/libwrap.so#d" /etc/ld.so.preload > /etc/ld.so.preload
    flen=$(stat /etc/ld.so.preload | grep Size | cut -d: -f2 | cut -c1-2)
    if (( ${flen} < 3 ))
    then rm -f /etc/ld.so.preload
    fi
  fi
}

appfirst_check_ld_preload() {
  if [[ -f /etc/AppFirst.ld_preload ]]
  then
    unset LD_PRELOAD
    if [[ -s /etc/ld.so.preload ]]
    then
      value=0
      while read value
      do
        if ! grep -q ${value} /etc/AppFirst.ld_preload
        then cat ${value} >> /etc/AppFirst.ld_preload
        fi
      done < /etc/ld.so.preload
    fi

    if [[ -e /dev/shm ]]
    then
      cp -f /etc/AppFirst.ld_preload /dev/shm/ld_preload
      chmod 0644 /dev/shm/ld_preload
      ln -fs /dev/shm/ld_preload /etc/ld.so.preload
    else
      cp -f /etc/AppFirst.ld_preload /tmp/ld_preload
      ln -fs /tmp/ld_preload /etc/ld.so.preload
    fi
  else
    rm -f /etc/ld.so.preload
    fail "ld_preload: WARNING: preload disabled: no ld_preload"
  fi
}

