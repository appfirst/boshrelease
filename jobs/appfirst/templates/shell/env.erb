#!/usr/bin/env bash

set -e

vmName="<%= name %>" # BOSH VM name
vmIndex="<%= index %>" # index within cluster
vmFullName="${vmName}/${vmIndex}" # full job name

LANG=en_US.UTF-8
HOME="${HOME:-"/home/vcap"}"
job="appfirst"
jobPath="/var/vcap/jobs/${job}"
pkgPath="/var/vcap/packages/${job}"
runPath="/var/vcap/sys/run/${job}"
logPath="/var/vcap/sys/log/${job}"
tmpPath="/var/vcap/sys/tmp/${job}"
storePath="/var/vcap/store/${job}"
dataPath="/var/vcap/store/${job}/data"
pidFile="${runPath}/afcollector.pid"
LD_LIBRARY_PATH="${pkgPath}/lib"
binary="${pkgPath}/bin/afcollector"

# NOTE: It is important for lib Path to be outside BOSH dir on system so that 
# it does not break any processes when bosh nukes or changes the job directory
# Until BOSH allows for a 'job uninstall/cleanup' hook we need this outside.
# Single file needs to persist even if appfirst job is removed.
wrapPath="/opt/appfirst/lib" 
configFile="${wrapPath}/AppFirst" # workaround collector disregarding --libdir

# Server tags are set in the properties of the manifest and associate with 
# servers on appfirst's backend.
serverTags=(
bosh
<% if_p('appfirst.server_tags') do |server_tags| %>
<%= server_tags.join("\n") %>
<% end %>
<% spec.job.templates.select{|t| t.name != "appfirst" }.each do |template| %>
<%= template.name %>
<% end %>
)

logFiles=(
<% if_p('appfirst.log_files') do |log_files| %>
<%= log_files.join("\n") %>
<% end %>
)

# Detect Architecture and configure accordingly
arch=$(uname -m)
case "${arch}" in
  ("x86_64") lib="lib64"; libproto="x86_64"; ;;
  (*) fail "Only x86_64 for afcollector is supported in BOSH at this time." ;;
esac

# Add all packages' /bin & /sbin into $PATH
for pkg_bin_path in $(ls -d /var/vcap/packages/*/*bin)
do PATH="${pkg_bin_path}:${PATH}"
done

# JMX collector will only be enabled if the property is set explicitely to 'true' in the manifest.
enableJMX=<%= p('appfirst.jmx_collector_enabled') %>
if [[ ${enableJMX:-"false"} == "true" ]]
then JMXCOLLECTOR="${pkgPath}/plugins/libexec/jmx-collector/jmxcollector"
else unset JMXCOLLECTOR
fi

export vmName vmIndex vmFullName job jobPath serverTags logFiles \
  runPath logPath tmpPath storePath wrapPath dataPath pidFile \
  PATH LANG HOME LD_LIBRARY_PATH JMXCOLLECTOR

paths=(
"${jobPath}" "${runPath}" "${logPath}" "${tmpPath}" "${storePath}" 
"${wrapPath}" "${dataPath}"
)

# Ensure all paths exist, are owned by vcap:vcap and are executable
for _path in "${paths[@]}"
do
  if ! [[ -d ${_path} ]]
  then
    mkdir -p "${_path}" 
    chown vcap:vcap "${_path}" 
    chmod 0775 "${_path}"
  fi
done

# Redirect all output to log file.
exec 1>> "${logPath}/${job}.log"
exec 2>> "${logPath}/${job}.log"

echo -e "$(date +'%Y-%m-%dT%H:%M:%S')\$> $0 $*"

if [[ ! -s ${jobPath}/config/AppFirst.init ]]
then # Write AppFirst Initialization File
  {
    echo -e "---\nnickname: ${vmFullName}"
    if (( ${#serverTags[@]} > 0 )) 
    then
      echo -e "\nserver_tags:"
      for serverTag in ${serverTags[@]} 
      do echo "  - ${serverTag}" 
      done
    fi

    if (( ${#logFiles[@]} > 0 ))
    then
      echo -e "logs:\n  file:"
      for logFile in "${logFiles[@]}" 
      do echo "    - ${logFile}" 
      done
    fi
  } >  ${jobPath}/config/AppFirst.init
fi

